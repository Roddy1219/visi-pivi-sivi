#! /bin/bash -
# these public functions for shell.
# by using ../pffs to source it to current shell environment to call.
setGlobalVariable(){
	pffs_var_templateFolderName="template";
}
setGlobalVariable;
formatStringToReg(){
	s="$1";
	#s=${s//\ /\\\ }
	s=${s//\//\\\/}
	s=${s//\"/\\\"}
	s=${s//\^/\\\^}
	s=${s//\$/\\\$}
	echo -n "${s}"
}

ifYesDo(){
	# ifYesDo "echo abc" will ask before eval "echo abc".
	# with an answer q , the script will be executed quietly.
	# or you can give the q to the second argument.eg. ifYesDo "echo abc" q.
	# With a third argument to call ifYesDo, it will ask with the 3rd argument instead of the 1st argument, which will be executed.
	#eg. ifYesDo "echo Hello World" "" "Do you want to echo hello world?" ;
	# The forth argument allow you to written some explainations. So user can see it with the ansower m, when they confused about this question.
	#eg.  ifYesDo "add-apt-repository ppa:chris-lea/node.js && apt-get update" "" "Add Offical repository to apt, and update package information again. Suggest 'yes'." "according to the solution in http://stackoverflow.com/questions/12913141/installing-from-npm-fails. We need install nodejs from offical respository. Because 'apparently the npm version in the Ubuntu distribution was outdated'"; #add offical source.;
	local script=${1};
	local defaultAnswer=${2}
	local comment=${3};
	local explaination=${4};
	local ansOptioins="y/n"
	case "${explaination}" in
		"") explaination=${script}; ;;
		*) ansOptioins=${ansOptioins}"/m"; ;;
	esac
	case "${comment}" in
		"") echo -n "${script}" "[${ansOptioins}]:"; ;;
		*) ansOptioins=${ansOptioins/\/n/\/n\/d}; echo -n "${comment}" "[${ansOptioins}]:";  ;;
	esac
	case ${defaultAnswer} in
		y|Y|yes|Yes|q|Q|quiet|QUIET|n|N|no|NO) in=${defaultAnswer};
			echo ${in};;
		m|M|more|MORE) in=${defaultAnswer};
			echo ${in};;
		*) while read in ;do 
			case "${in}" in
				y|Y|yes|Yes|q|Q|quiet|QUIET|n|N|no|NO) break ;;
				d|D|detail|detail) ansOptioins=${ansOptioins/\/d/}; echo -n "${script}" "[${ansOptioins}]:";;
				m|M|more|MORE) ansOptioins=${ansOptioins/\/m/}; echo -n "${explaination}" "[${ansOptioins}]:";;
				*) echo -n "press 'yes' or 'no':" ;;
			esac
		done;
	esac
	case "${in}" in
		y|Y|yes|Yes) eval "${script}" ;;
		q|Q|quiet|QUIET) eval "${script}" > /dev/null;;
		n|N|no|NO) echo "fine, passed." ;;
	esac
}

readNonBlankValue(){
	# EXAMPLE:
	# read non blank value into the second parameter which is given as 'country' here. The default value is US;
	#	readNonBlankValue "KEY_CONTURY=" country "US";
	local question=${1} ;
	local answer=${2} ;
	local defaultAnswer=${3} ;
	local echooff=${4} ;
	local in ;
	if [[ "${answer}" ]] ; then
		echo -n "${question}" ;
		if [[ "${echooff}" ]] ; then
			stty -echo;
		fi;
		while read in ;do 
			if [[ "${echooff}" ]] ; then
				stty echo;
			fi;
			case "${in}" in
				"") if [[ "${defaultAnswer}" ]] ; then
						eval ${answer}="'${defaultAnswer}'" ;
						break;
					else
						echo "";
						echo "# Don't leave this field blank. " "${question}"; 
						if [[ "${echooff}" ]] ; then
							stty -echo;
						fi;
						continue;
					fi ;;
				*) eval ${answer}="'${in}'" ;
					break ;;
			esac
			if [[ "${echooff}" ]] ; then
				stty -echo;
			fi;
		done;
		if [[ "${echooff}" ]] ; then
			stty echo;
		fi;
	else
		echo "" ;
	fi;
}

preDealDir(){
	# resolve links - $0 may be a softlink
	PRG="$0"
	while [ -h "$PRG" ] ; do
	  ls=`ls -ld "$PRG"`
	  link=`expr "$ls" : '.*-> \(.*\)$'`
	  if expr "$link" : '/.*' > /dev/null; then
		PRG="$link"
	  else
		PRG=`dirname "$PRG"`/"$link"
	  fi
	done
	PRGDIR=`dirname "$PRG"`
	echo ${PRGDIR}
}

mustBeExist(){
	# make sure it is exist.
	local fileDir=${1};
	if [ ! -e ${fileDir} ];
	then
		touch ${fileDir};
	fi;
}
catIntoFile(){
	#cat sentences into file
	local sentences=${1};
	local fileDir=${2};
	local eof="EOF";
	case ${3} in
		"") eof="EOF";;
		*) eof=${3};;
	esac;
	mustBeExist ${fileDir};
	if [ -w ${fileDir} ];
	then
		cat >>${fileDir}<<-${eof}
			${sentences}
			${eof}
	else
		echo ${fileDir} can not be wrote!
	fi;
}

sedIntoFile(){
	#sed sentences after specified words in specified file.
	#EXAMPLE:
	# replace a string in file.
	#	local refSentence="export KEY_CITY=\"NY\"";
	#	local sentences="export KEY_CITY=\"CD\"";
	#	local fileDir="/home/will/tmp/testfile";
	#	echo "${refSentence}" > ${fileDir};
	#	sedIntoFile ${sentences} ${fileDir} replace "export KEY_CITY=.*" 
	#
	local sentences=${1};
	local fileDir=${2};
	local sedType=${3};
	local refSentence=${4};
#echo "$refSentence";
	mustBeExist ${fileDir};
	if [ -w ${fileDir} ];
	then
		if [ $# -lt 2 ];
		then
			return 2;
		elif [ $# -lt 4 ];
		then # add sentences to the end of the file;
			case ${sedType} in
				""|a|after|AFTER) sed -i -e $"$ a ${sentences}" ${fileDir} ;;
				b|before|BEFORE) sed -i -e $"$ i ${sentences}" ${fileDir} ;;
				r|replace|REPLACE) sed -i -e $"/^.*$/ d" ${fileDir}&&echo ${sentences} > ${fileDir} ;;
				*) return 2 ;;
			esac
		elif [ $# -ge 4 ];
		then
			case ${sedType} in
				""|a|after|AFTER) sed -i -e $"/^${refSentence}$/ a ${sentences}" ${fileDir} ;;
				b|before|BEFORE) sed -i -e $"/^${refSentence}$/ i ${sentences}" ${fileDir} ;;
				r|replace|REPLACE) sed -i -e $"/^${refSentence}$/ c ${sentences}" ${fileDir} ;;
				*) return 2 ;;
			esac
		else
			return 2 ;
		fi
	else
		echo ${fileDir} can not be wrote!
	fi
}
